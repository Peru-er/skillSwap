from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import uvicorn
from fastapi.staticfiles import StaticFiles

from src.database.db import engine, get_db
from src.database.models import Base
from src.routes import users, skills, exchanges, reviews, categories, stats
from src.routes.photos import router as photos_router


# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ (—è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å)
Base.metadata.create_all(bind=engine)

# –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
app = FastAPI(
    title="SkillSwap API",
    description="REST API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –æ–±–º—ñ–Ω—É –Ω–∞–≤–∏—á–∫–∞–º–∏",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["<http://localhost:3000>"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
app.include_router(users.router, prefix="/api")
app.include_router(skills.router, prefix="/api")
app.include_router(exchanges.router, prefix="/api")
app.include_router(reviews.router, prefix="/api")
app.include_router(stats.router, prefix="/api")
app.include_router(categories.router, prefix="/api")
app.include_router(photos_router, prefix="/api")
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")

@app.get("/")
def read_root():
    return {
        "message": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SkillSwap API v2.0",
        "documentation": "/docs",
        "endpoints": {
            "users": "/api/users",
            "skills": "/api/skills",
            "exchanges": "/api/exchanges",
            "reviews": "/api/reviews"
        }
    }

@app.get("/health")
def health_check(db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç–∞ –ë–î."""
    try:
# –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
        db.execute("SELECT 1")
        db_status = "connected"
    except Exception as e:
        db_status = f"error: {str(e)}"

    return {
        "status": "healthy",
        "database": db_status,
        "version": "2.0.0"
    }

@app.on_event("startup")
async def startup_event():
    """–î—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É."""
    print("üöÄ SkillSwap API –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: <http://localhost:8000/docs>")


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
